// Copyright (c) 2022-2023 Yuki Kishimoto
// Distributed under the MIT software license

namespace nostr {};

[Error]
interface NostrError {
    Generic(string err);
};

interface Keys {
    [Throws=NostrError]
    constructor(string sk);
    [Throws=NostrError, Name=from_public_key]
    constructor(string pk);
    [Throws=NostrError, Name=from_bech32_public_key]
    constructor(string pk);
    [Throws=NostrError, Name=from_bech32]
    constructor(string sk);
    [Name=generate]
    constructor();
    [Throws=NostrError, Name=from_mnemonic]
    constructor(string mnemonic, optional string? passphrase = null);
    string public_key();
    [Throws=NostrError]
    string public_key_bech32();
    [Throws=NostrError]
    string secret_key();
    [Throws=NostrError]
    string secret_key_bech32();
};

interface Filter {
    constructor();
    [Throws=NostrError, Self=ByArc]
    Filter id(string id);
    [Throws=NostrError, Self=ByArc]
    Filter ids(sequence<string> ids);
    [Self=ByArc]
    Filter kind(u64 kind);
    [Throws=NostrError, Self=ByArc]
    Filter event(string event_id);
    [Throws=NostrError, Self=ByArc]
    Filter pubkey(string pubkey);
    [Self=ByArc]
    Filter since(u64 timestamp);
    [Self=ByArc]
    Filter until(u64 timestamp);
    [Throws=NostrError, Self=ByArc]
    Filter authors(sequence<string> authors);
};

interface Event {
    string pubkey();
    u64 kind();
    string content();
    boolean verify();
    [Throws=NostrError, Name=from_json]
    constructor(string json);
    string as_json();
};

interface EventBuilder {
    [Throws=NostrError]
    constructor(u64 kind, string content, sequence<sequence<string>> tags);
    [Throws=NostrError]
    Event to_event(Keys keys);
    [Throws=NostrError]
    Event to_pow_event(Keys keys, u8 difficulty);

    [Name=set_metadata]
    constructor(AccountMetadata metadata);
    [Throws=NostrError, Name=add_recommended_relay]
    constructor(string url);
    [Throws=NostrError, Name=new_text_note]
    constructor(string content, sequence<sequence<string>> tags);
    [Throws=NostrError, Name=long_form_text_note]
    constructor(string content, sequence<sequence<string>> tags);
    [Throws=NostrError, Name=repost]
    constructor(string event_id, string public_key);
    [Name=set_contact_list]
    constructor(sequence<Contact> list);
    [Throws=NostrError, Name=new_encrypted_direct_msg]
    constructor(Keys sender_keys, string receiver_pubkey, string content);
    [Throws=NostrError, Name=delete]
    constructor(sequence<string> ids, optional string? reason = null);
    [Throws=NostrError, Name=new_reaction]
    constructor(string event_id, string public_key, string content);

    [Name=new_channel]
    constructor(AccountMetadata metadata);
    [Throws=NostrError, Name=set_channel_metadata]
    constructor(string channel_id, string? relay_url, AccountMetadata metadata);
    [Throws=NostrError, Name=new_channel_msg]
    constructor(string channel_id, string relay_url, string content);
    [Throws=NostrError, Name=hide_channel_msg]
    constructor(string message_id, string? reason);
    [Throws=NostrError, Name=mute_channel_user]
    constructor(string public_key, string? reason);
};

interface Contact {
    [Throws=NostrError]
    constructor(string pk, optional string? relay_url = null, optional string? alias = null);
    string? alias();
    string public_key();
    string? relay_url();
};

interface AccountMetadata {
    constructor();
    [Self=ByArc]
    AccountMetadata name(string name);
    [Self=ByArc]
    AccountMetadata display_name(string display_name);
    [Self=ByArc]
    AccountMetadata about(string about);
    [Throws=NostrError, Self=ByArc]
    AccountMetadata picture(string picture);
    [Self=ByArc]
    AccountMetadata nip05(string nip05);
};