// Copyright (c) 2023-2024 Rust Nostr Developers
// Distributed under the MIT software license

use nostr::nips::nip15;
use uniffi::Record;

/// Payload for creating or updating stall
#[derive(Record)]
pub struct StallData {
    /// UUID of the stall generated by merchant
    pub id: String,
    /// Stall name
    pub name: String,
    /// Stall description
    pub description: Option<String>,
    /// Currency used
    pub currency: String,
    /// Available shipping methods
    pub shipping: Vec<ShippingMethod>,
}

impl From<StallData> for nip15::StallData {
    fn from(value: StallData) -> Self {
        Self {
            id: value.id,
            name: value.name,
            description: value.description,
            currency: value.currency,
            shipping: value.shipping.into_iter().map(|s| s.into()).collect(),
        }
    }
}

#[derive(Record)]
pub struct ShippingMethod {
    /// Shipping method unique id by merchant
    pub id: String,
    /// Shipping method name
    pub name: Option<String>,
    /// Shipping method cost (currency is the same as the stall)
    pub cost: f64,
    /// Covered regions
    pub regions: Vec<String>,
}

impl From<ShippingMethod> for nip15::ShippingMethod {
    fn from(value: ShippingMethod) -> Self {
        Self {
            id: value.id,
            name: value.name,
            cost: value.cost,
            regions: value.regions,
        }
    }
}
