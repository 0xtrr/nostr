// Copyright (c) 2022-2023 Yuki Kishimoto
// Distributed under the MIT software license

namespace nostr_sdk {
    // Nostr
    [Throws=NostrError]
    string nip04_encrypt(SecretKey secret_key, PublicKey public_key, string content);
    [Throws=NostrError]
    string nip04_decrypt(SecretKey secret_key, PublicKey public_key, string encrypted_content);

    // Nostr SDK
    void init_logger(optional string? level = null);
};

[Error]
interface NostrSdkError {
    Generic(string err);
};

// NOSTR

[Error]
interface NostrError {
    Generic(string err);
};

interface Timestamp {
    [Name=now]
    constructor();
    [Name=from_secs]
    constructor(u64 secs);
    u64 as_secs();
    string to_human_datetime();
};

interface SecretKey {
    [Throws=NostrError, Name=from_hex]
    constructor(string hex);
    [Throws=NostrError, Name=from_bech32]
    constructor(string pk);
    string to_hex();
    [Throws=NostrError]
    string to_bech32();
};

interface PublicKey {
    [Throws=NostrError, Name=from_hex]
    constructor(string hex);
    [Throws=NostrError, Name=from_bech32]
    constructor(string pk);
    string to_hex();
    [Throws=NostrError]
    string to_bech32();
};

interface Keys {
    constructor(SecretKey sk);
    [Name=from_public_key]
    constructor(PublicKey pk);
    [Throws=NostrError, Name=from_sk_str]
    constructor(string sk);
    [Throws=NostrError, Name=from_pk_str]
    constructor(string pk);
    [Name=generate]
    constructor();
    [Throws=NostrError, Name=from_mnemonic]
    constructor(string mnemonic, optional string? passphrase = null);
    PublicKey public_key();
    [Throws=NostrError]
    SecretKey secret_key();
};

[Enum]
interface ClientMessage {
  Ev(string event);
  Req(string subscription_id, sequence<string> filters);
  Count(string subscription_id, sequence<string> filters);
  Close(string subscription_id);
  Auth(string event);
};

[Enum]
interface RelayMessage {
  Ev(string subscription_id, string event);
  Notice(string message);
  EndOfStoredEvents(string subscription_id);
  Ok(string event_id, boolean status, string message);
  Auth(string challenge);
  Count(string subscription_id, u64 count);
};

interface Filter {
    constructor();
    [Throws=NostrError, Self=ByArc]
    Filter id(string id);
    [Throws=NostrError, Self=ByArc]
    Filter ids(sequence<string> ids);
    [Self=ByArc]
    Filter kind(u64 kind);
    [Throws=NostrError, Self=ByArc]
    Filter event(string event_id);
    [Self=ByArc]
    Filter pubkey(PublicKey pubkey);
    [Self=ByArc]
    Filter since(u64 timestamp);
    [Self=ByArc]
    Filter until(u64 timestamp);
    [Throws=NostrError, Self=ByArc]
    Filter authors(sequence<string> authors);
};

interface UnsignedEvent {
    string id();
    PublicKey pubkey();
    Timestamp created_at();
    u64 kind();
    string content();
    [Throws=NostrError]
    Event sign(Keys keys);
    [Throws=NostrError]
    Event add_signature(string sig);
    [Throws=NostrError, Name=from_json]
    constructor(string json);
    string as_json();
};

interface Event {
    string id();
    PublicKey pubkey();
    Timestamp created_at();
    u64 kind();
    string content();
    string signature();
    boolean verify();
    [Throws=NostrError, Name=from_json]
    constructor(string json);
    string as_json();
};

interface EventBuilder {
    [Throws=NostrError]
    constructor(u64 kind, string content, sequence<sequence<string>> tags);
    [Throws=NostrError]
    Event to_event(Keys keys);
    [Throws=NostrError]
    Event to_pow_event(Keys keys, u8 difficulty);

    [Name=set_metadata]
    constructor(AccountMetadata metadata);
    [Throws=NostrError, Name=add_recommended_relay]
    constructor(string url);
    [Throws=NostrError, Name=new_text_note]
    constructor(string content, sequence<sequence<string>> tags);
    [Throws=NostrError, Name=long_form_text_note]
    constructor(string content, sequence<sequence<string>> tags);
    [Throws=NostrError, Name=repost]
    constructor(string event_id, PublicKey public_key);
    [Name=set_contact_list]
    constructor(sequence<Contact> list);
    [Throws=NostrError, Name=new_encrypted_direct_msg]
    constructor(Keys sender_keys, PublicKey receiver_pubkey, string content);
    [Throws=NostrError, Name=delete]
    constructor(sequence<string> ids, optional string? reason = null);
    [Throws=NostrError, Name=new_reaction]
    constructor(string event_id, PublicKey public_key, string content);

    [Name=new_channel]
    constructor(AccountMetadata metadata);
    [Throws=NostrError, Name=set_channel_metadata]
    constructor(string channel_id, string? relay_url, AccountMetadata metadata);
    [Throws=NostrError, Name=new_channel_msg]
    constructor(string channel_id, string relay_url, string content);
    [Throws=NostrError, Name=hide_channel_msg]
    constructor(string message_id, string? reason);
    [Throws=NostrError, Name=mute_channel_user]
    constructor(PublicKey public_key, string? reason);

    [Throws=NostrError, Name=auth]
    constructor(string challenge, string relay_url);
};

interface Contact {
    constructor(PublicKey pk, optional string? relay_url = null, optional string? alias = null);
    string? alias();
    PublicKey public_key();
    string? relay_url();
};

interface AccountMetadata {
    constructor();
    [Self=ByArc]
    AccountMetadata name(string name);
    [Self=ByArc]
    AccountMetadata display_name(string display_name);
    [Self=ByArc]
    AccountMetadata about(string about);
    [Throws=NostrError, Self=ByArc]
    AccountMetadata picture(string picture);
    [Self=ByArc]
    AccountMetadata nip05(string nip05);
};

// NOSTR-SDK

interface RelayConnectionStats {
    u64 attempts();
    u64 success();
    u64 connected_at();
};

enum RelayStatus {
    "Initialized",
    "Connected",
    "Connecting",
    "Disconnected",
    "Stopped",
    "Terminated",
};

interface ActiveSubscription {
    string id();
    sequence<Filter> filters();
};

interface Relay {
    string url();
    string? proxy();
    RelayStatus status();
    boolean is_connected();
    ActiveSubscription subscription();
    void update_subscription_filters(sequence<Filter> filters);
    RelayConnectionStats stats();

    void connect(boolean wait_for_connection);
    [Throws=NostrSdkError]
    void stop();
    [Throws=NostrSdkError]
    void terminate();

    [Throws=NostrSdkError]
    void send_msg(ClientMessage msg, duration? wait);
    [Throws=NostrSdkError]
    string subscribe(sequence<Filter> filters, duration? wait);
    [Throws=NostrSdkError]
    void unsubscribe(duration? wait);

    [Throws=NostrSdkError]
    sequence<Event> get_events_of(sequence<Filter> filters, duration? timeout);
    void req_events_of(sequence<Filter> filters, duration? timeout);
};

interface Options {
    constructor();
    [Self=ByArc]
    Options wait_for_connection(boolean wait);
    [Self=ByArc]
    Options wait_for_send(boolean wait);
    [Self=ByArc]
    Options wait_for_subscription(boolean wait);
    [Self=ByArc]
    Options difficulty(u8 difficulty);
    [Self=ByArc]
    Options req_filters_chunk_size(u8 req_filters_chunk_size);
    [Self=ByArc]
    Options timeout(duration? timeout);
    [Self=ByArc]
    Options send_timeout(duration? send_timeout);
    [Self=ByArc]
    Options nip46_timeout(duration? nip46_timeout);
};

interface Client {
    constructor(Keys keys);
    [Name=with_opts]
    constructor(Keys keys, Options opts);

    void update_difficulty(u8 difficulty);
    Keys keys();

    void start();
    [Throws=NostrSdkError]
    void stop();
    boolean is_running();
    [Throws=NostrSdkError]
    void shutdown();
    void clear_already_seen_events();

    record<DOMString, Relay> relays();
    [Throws=NostrSdkError]
    Relay relay(string url);
    [Throws=NostrSdkError]
    void add_relay(string url, optional string? proxy = null);
    [Throws=NostrSdkError]
    void remove_relay(string url);
    [Throws=NostrSdkError]
    void connect_relay(string url);
    [Throws=NostrSdkError]
    void disconnect_relay(string url);
    void connect();
    [Throws=NostrSdkError]
    void disconnect();

    void subscribe(sequence<Filter> filters);
    void unsubscribe();

    [Throws=NostrSdkError]
    sequence<Event> get_events_of(sequence<Filter> filters, duration? timeout);
    void req_events_of(sequence<Filter> filters, duration? timeout);

    [Throws=NostrSdkError]
    void send_msg(ClientMessage msg);
    [Throws=NostrSdkError]
    void send_msg_to(string url, ClientMessage msg);
    [Throws=NostrSdkError]
    string send_event(Event event);
    [Throws=NostrSdkError]
    string send_event_to(string url, Event event);

    [Self=ByArc]
    void handle_notifications(HandleNotification handler);
};

callback interface HandleNotification {
    void handle_msg(string relay_url, RelayMessage msg);
    void handle(string relay_url, Event event);
};
